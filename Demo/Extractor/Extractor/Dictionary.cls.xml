<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Demo.Extractor.Extractor.Dictionary">
<Abstract>1</Abstract>
<Super>Abstract</Super>
<TimeCreated>63719,74436.002137</TimeCreated>

<Parameter name="TRACKENTITIES">
<Default>1</Default>
</Parameter>

<Property name="DictionaryId">
<Type>%Integer</Type>
</Property>

<Method name="GetTerms">
<Description>
Return the (literal) terms this extractor should take care of:
		pTerms(ID) = $lb(name, $lb(terms, ...))</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>*pTerms</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit $$$OK
]]></Implementation>
</Method>

<Method name="Register">
<Description>
Registers this extractor with the domain, preparing any required domain artifacts such as
dictionary items and formats.</Description>
<Final>1</Final>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC = $$$OK
	try {
		// check if this dictionary already exists
		set ..DictionaryId = ##class(%iKnow.Matching.DictionaryAPI).GetDictionaryId(..DomainId, $classname())
		quit:..DictionaryId>0
		
		set ..DictionaryId = ##class(%iKnow.Matching.DictionaryAPI).CreateDictionary(..DomainId, $classname(), "Extractor dictionary for "_$classname(),,, .tSC)
		quit:$$$ISERR(tSC)
		
		do ..GetTerms(.tTerms)
		set id = ""
		for {
			set id = $order(tTerms(id), 1, tData)
			quit:id=""
			
			set tItemURI = $classname()_":"_id
			
			set tDictItemId = ##class(%iKnow.Matching.DictionaryAPI).CreateDictionaryItem(..DomainId, ..DictionaryId, $lg(tData,1), $classname()_":"_id,, .tSC)
			quit:$$$ISERR(tSC)
			
			set tStrings = $lg(tData,2), ptr=0
			while $listnext(tStrings,ptr,tString) {
				set tDictTermId = ##class(%iKnow.Matching.DictionaryAPI).CreateDictionaryTerm(..DomainId, tDictItemId, tString,, .tSC)
				quit:$$$ISERR(tSC)
			}
		}
		
	} catch (ex) {
		set tSC = ex.AsStatus()
	}
	quit tSC
]]></Implementation>
</Method>

<Method name="Unregister">
<ClassMethod>1</ClassMethod>
<FormalSpec>pDomainId:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tDictId = ##class(%iKnow.Matching.DictionaryAPI).GetDictionaryId(pDomainId, $classname())
	quit:tDictId<=0 $$$OK
	quit ##class(%iKnow.Matching.DictionaryAPI).DropDictionary(pDomainId, tDictId)
]]></Implementation>
</Method>

<Method name="Extract">
<Description><![CDATA[
Extracts item values from <var>pSourceId</var> and appends them to <var>pResults</var>
		pResults(ITEM, n) = $lb(value, score, classname, highlightspec, entities)]]></Description>
<FormalSpec><![CDATA[pSourceId:%Integer,&pResults]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC = $$$OK
	try {
		do ..GetTerms(.tTerms)
		
		set tSC = ##class(%iKnow.Matching.MatchingAPI).GetMatchesBySourceId(.tMatches, ..DomainId, pSourceId, $lb(..DictionaryId), 0, 0)
		quit:$$$ISERR(tSC)
		
		set i = ""
		for {
			set i = $order(tMatches(i), 1, tData)
			quit:i=""
			
			set tMatchId = $lg(tData,1), tItemURI = $lg(tData,4), tScore = $lg(tData,8)
			set tTermInfo = $g(tTerms($piece(tItemURI,":",2)))
			continue:tTermInfo=""
			set tName = $lg(tTermInfo,1)
			
			// retrieve detailed results
			set tSC = ##class(%iKnow.Matching.MatchingAPI).GetMatchElements(.tElements, ..DomainId, tMatchId, $s(pSourceId<0:pSourceId, 1:0))
			quit:$$$ISERR(tSC)
			
			// walk through elements
			set tEntities = "", j = ""
			for {
				set j = $order(tElements(j), 1, tElementData)
				quit:j=""
				
				//set tEntities = tEntities_$lb(##class(%iKnow.Queries.EntityAPI).GetValueInternal(..DomainId, $lg(tElementData,3), $s(pSourceId<0:pSourceId, 1:0)))
				set:..#TRACKENTITIES tEntities = tEntities_$lb($lg(tElementData,3))
			}
			do ..AddResult(.pResults, tName, tScore, "MATCH:"_..DictionaryId_":"_tMatchId, tEntities, $lg(tData,14))
		}
		quit:$$$ISERR(tSC)
		
	} catch (ex) {
		set tSC = ex.AsStatus()
	}
	quit tSC
]]></Implementation>
</Method>
</Class>
</Export>
